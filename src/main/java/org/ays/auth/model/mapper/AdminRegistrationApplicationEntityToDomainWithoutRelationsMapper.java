package org.ays.auth.model.mapper;

import org.ays.auth.model.AdminRegistrationApplication;
import org.ays.auth.model.entity.AdminRegistrationApplicationEntity;
import org.ays.common.model.mapper.BaseMapper;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * {@code AdminRegistrationApplicationEntityToDomainWithoutRelationsMapper} is a MapStruct-based mapper interface
 * that defines the transformation logic between {@link AdminRegistrationApplicationEntity} (the persistence model)
 * and {@link AdminRegistrationApplication} (the domain model).
 * <p>
 * This mapper intentionally excludes the {@code user} relation to avoid eager loading or complex object graph mapping,
 * which is especially useful in scenarios where performance and serialization control are critical.
 * </p>
 *
 * <p>
 * An implementation of this interface is automatically generated by MapStruct at compile time.
 * Use the {@link #initialize()} method to access the generated implementation.
 * </p>
 *
 * <p>
 * This interface extends {@link BaseMapper}, which provides generic mapping contract definitions.
 * </p>
 */
@Mapper
public interface AdminRegistrationApplicationEntityToDomainWithoutRelationsMapper extends BaseMapper<AdminRegistrationApplicationEntity, AdminRegistrationApplication> {


    /**
     * Maps a {@link AdminRegistrationApplicationEntity} to its domain representation {@link AdminRegistrationApplication},
     * ignoring the {@code user} field.
     *
     * @param source the entity object to be mapped
     * @return the mapped domain object
     */
    @Override
    @Mapping(target = "user", source = "user", ignore = true)
    AdminRegistrationApplication map(AdminRegistrationApplicationEntity source);


    /**
     * Initializes and returns the generated mapper implementation.
     *
     * @return an instance of {@link AdminRegistrationApplicationEntityToDomainWithoutRelationsMapper}
     */
    static AdminRegistrationApplicationEntityToDomainWithoutRelationsMapper initialize() {
        return Mappers.getMapper(AdminRegistrationApplicationEntityToDomainWithoutRelationsMapper.class);
    }

}
