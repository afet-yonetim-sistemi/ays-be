package org.ays.auth.config;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.ays.auth.model.enums.AysConfigurationParameter;
import org.ays.auth.util.AysKeyConverter;
import org.ays.parameter.model.AysParameter;
import org.ays.parameter.service.AysParameterService;
import org.springframework.context.annotation.Configuration;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Optional;
import java.util.Set;

/**
 * Configuration class for AYS token-related properties.
 * <p>
 * This class reads and initializes token configuration parameters, including the issuer, token expiration times,
 * and cryptographic keys used for JWT generation and validation. It retrieves these parameters via the
 * {@link AysParameterService} using the "AUTH_" prefix and falls back to default values when necessary.
 * </p>
 */
@Slf4j
@Getter
@Configuration
public class AysApplicationConfigurationParameter {

    /**
     * The issuer value to be used in JWTs generated by the application.
     */
    private final String tokenIssuer;
    /**
     * The private key used for token signing.
     * This key is converted from an encrypted PEM format using {@link AysKeyConverter}.
     */
    private final PrivateKey tokenPrivateKey;
    /**
     * The public key used for token verification.
     * This key is converted from an encrypted PEM format using {@link AysKeyConverter}.
     */
    private final PublicKey tokenPublicKey;
    /**
     * The number of minutes until access tokens expire.
     * Derived from configuration parameters or defaults if not provided.
     */
    private final Integer accessTokenExpireMinute;
    /**
     * The number of days until refresh tokens expire.
     * Derived from configuration parameters or defaults if not provided.
     */
    private final Integer refreshTokenExpireDay;


    /**
     * Constructs a new {@code AysApplicationConfigurationParameter} instance.
     * <p>
     * This constructor retrieves the required configuration parameters using the provided
     * {@link AysParameterService} instance. It filters parameters using the "AUTH_" prefix, applies default values
     * when parameters are missing, and converts cryptographic key parameters into {@link PrivateKey} and {@link PublicKey} objects.
     * </p>
     *
     * @param parameterService the {@link AysParameterService} instance to use for retrieving configuration parameters
     */
    public AysApplicationConfigurationParameter(AysParameterService parameterService) {

        log.info("Application Configuration Parameters reading...");

        final Set<AysParameter> configurationParameters = parameterService.findAll("AUTH_");

        this.tokenIssuer = AysConfigurationParameter.AYS.getDefaultValue();
        log.info("Application auth configuration parameter has been set. tokenIssuer:{}", tokenIssuer);

        final String encryptedPrivateKey = Optional
                .ofNullable(AysParameter.getDefinition(AysConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY, configurationParameters))
                .orElse(AysConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY.getDefaultValue());
        this.tokenPrivateKey = AysKeyConverter.convertPrivateKey(encryptedPrivateKey);
        log.info("Application auth configuration parameter has been set. tokenPrivateKey:{}", encryptedPrivateKey.substring(0, 100).concat("..."));

        final String encryptedPublicKey = Optional
                .ofNullable(AysParameter.getDefinition(AysConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY, configurationParameters))
                .orElse(AysConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY.getDefaultValue());
        this.tokenPublicKey = AysKeyConverter.convertPublicKey(encryptedPublicKey);
        log.info("Application auth configuration parameter has been set. tokenPublicKey:{}", encryptedPublicKey.substring(0, 100).concat("..."));

        this.accessTokenExpireMinute = Optional
                .ofNullable(AysParameter.getDefinition(AysConfigurationParameter.AUTH_ACCESS_TOKEN_EXPIRE_MINUTE, configurationParameters))
                .map(Integer::valueOf)
                .orElse(Integer.valueOf(AysConfigurationParameter.AUTH_ACCESS_TOKEN_EXPIRE_MINUTE.getDefaultValue()));
        log.info("Application auth configuration parameter has been set. accessTokenExpireMinute:{}", accessTokenExpireMinute);

        this.refreshTokenExpireDay = Optional
                .ofNullable(AysParameter.getDefinition(AysConfigurationParameter.AUTH_REFRESH_TOKEN_EXPIRE_DAY, configurationParameters))
                .map(Integer::valueOf)
                .orElse(Integer.valueOf(AysConfigurationParameter.AUTH_REFRESH_TOKEN_EXPIRE_DAY.getDefaultValue()));
        log.info("Application auth configuration parameter has been set. refreshTokenExpireDay:{}", refreshTokenExpireDay);

        log.info("Application Configuration Parameters read!");
    }

}
